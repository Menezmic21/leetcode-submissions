{"id":866499072,"question_id":2366,"lang":"java","lang_name":"Java","time":"1 year, 5 months","timestamp":1672165577,"status":10,"status_display":"Accepted","runtime":"97 ms","url":"/submissions/detail/866499072/","is_pending":"Not Pending","title":"Maximum Bags With Full Capacity of Rocks","memory":"51.9 MB","code":"class Solution {\n    public int maximumBags(int[] capacity, int[] rocks, int additionalRocks) {\n        int[][] space = new int[rocks.length][2];\n        for(int i = 0; i < rocks.length; i++) {\n            space[i][0] = capacity[i] - rocks[i];\n            space[i][1] = i;\n        }\n        Comparator<int[]> sorter = (int[] bag1, int[] bag2) -> Integer.valueOf(bag1[0]).compareTo(Integer.valueOf(bag2[0]));\n        Arrays.sort(space, sorter);\n        // for(int[] bag:space) {\n        //     System.out.print(bag[0] + \" \");\n        // }\n        int fullBags = 0;\n        while(fullBags < rocks.length && additionalRocks > 0) {\n            additionalRocks -= space[fullBags][0];\n            if(additionalRocks >= 0) {\n                fullBags++;\n            }\n        }\n        return fullBags;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-bags-with-full-capacity-of-rocks","has_notes":false,"flag_type":1}