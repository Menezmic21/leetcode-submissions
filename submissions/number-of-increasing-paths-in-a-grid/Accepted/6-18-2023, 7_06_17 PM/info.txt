{"id":974371637,"question_id":2409,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1687133177,"status":10,"status_display":"Accepted","runtime":"146 ms","url":"/submissions/detail/974371637/","is_pending":"Not Pending","title":"Number of Increasing Paths in a Grid","memory":"56.1 MB","code":"class Solution {\n    public int countPaths(int[][] grid) {\n        int paths = 0;\n        HashMap<Integer, Integer> memo = new HashMap<Integer, Integer>();\n        for(int i = 0; i < grid.length; i++) {\n            for(int j = 0; j < grid[0].length; j++) {\n                paths = (paths + dfs(i, j, grid, memo)) % ((int) 1e9 + 7);\n            }\n        }\n        return paths;\n    }\n\n    public int dfs(int i, int j, int[][] grid, HashMap<Integer, Integer> memo) {\n\n        if(memo.getOrDefault(coordToNum(i, j, grid), null) != null) {\n            return memo.get(coordToNum(i, j, grid));\n        }\n\n        int[] coord = {i, j};\n        int[] north = {coord[0] - 1, coord[1]};\n        int[] east = {coord[0], coord[1] - 1};\n        int[] south = {coord[0] + 1, coord[1]};\n        int[] west = {coord[0], coord[1] + 1};\n\n        int paths = 1;\n        \n        if(isValidCoord(north, grid) && grid[coord[0]][coord[1]] < grid[north[0]][north[1]]) {\n            paths = (paths + dfs(north[0], north[1], grid, memo)) % ((int) 1e9 + 7);\n        }\n        if(isValidCoord(east, grid) && grid[coord[0]][coord[1]] < grid[east[0]][east[1]]) {\n            paths = (paths + dfs(east[0], east[1], grid, memo)) % ((int) 1e9 + 7);\n        }\n        if(isValidCoord(south, grid) && grid[coord[0]][coord[1]] < grid[south[0]][south[1]]) {\n            paths = (paths + dfs(south[0], south[1], grid, memo)) % ((int) 1e9 + 7);\n        }\n        if(isValidCoord(west, grid) && grid[coord[0]][coord[1]] < grid[west[0]][west[1]]) {\n            paths = (paths + dfs(west[0], west[1], grid, memo)) % ((int) 1e9 + 7);\n        }\n\n        memo.put(coordToNum(i, j, grid), paths);\n        return paths;\n    }\n\n    public int coordToNum(int i, int j, int[][] grid) {\n        return j + i * grid[0].length;\n    }\n\n    public int[] numToCoord(int v, int[][] grid) {\n        int[] coord = {(int) v / grid[0].length, v % grid[0].length};\n        return coord;\n    }\n\n    public boolean isValidCoord(int[] coord, int[][] grid) {\n        int gridWidth = grid[0].length - 1;\n        int gridHeight = grid.length - 1;\n        if(coord[0] < 0 || coord[0] > gridHeight) {\n            return false;\n        }\n        if(coord[1] < 0 || coord[1] > gridWidth) {\n            return false;\n        }\n        return true;\n    }\n}","compare_result":"111111111111111111111111111111111111","title_slug":"number-of-increasing-paths-in-a-grid","has_notes":false,"flag_type":1}