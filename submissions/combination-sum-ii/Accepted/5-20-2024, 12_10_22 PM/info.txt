{"id":1263274421,"question_id":40,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1716225022,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1263274421/","is_pending":"Not Pending","title":"Combination Sum II","memory":"43.1 MB","code":"class Solution {\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        Arrays.sort(candidates);\n        List<List<Integer>> targetCombs = new ArrayList<List<Integer>>();\n        backtrace(targetCombs, candidates, new ArrayList<Integer>(), 0, 0, target);\n        return targetCombs;\n    }\n    private void backtrace(List<List<Integer>> targetCombs, int[] candidates, List<Integer> currComb, int currIdx, int sum, int target) {\n        if (sum > target) {\n            // System.out.println(\"too big\");\n            return;\n        }\n        if (sum == target) {\n            // System.out.println(\"adding a comb\");\n            targetCombs.add(new ArrayList<Integer>(currComb));\n            return;\n        }\n        for (int i = currIdx; i < candidates.length; ) {\n            currComb.add(candidates[i]);\n            backtrace(targetCombs, candidates, currComb, i+1, sum + candidates[i], target);\n            currComb.remove(Integer.valueOf(candidates[i]));\n            int old = candidates[i];\n            while (i < candidates.length && candidates[i] == old) {\n                i++;\n            }\n        }\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii","has_notes":false,"flag_type":1}