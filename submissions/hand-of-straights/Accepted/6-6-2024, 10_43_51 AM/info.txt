{"id":1279674766,"question_id":876,"lang":"java","lang_name":"Java","time":"2 weeks, 1 day","timestamp":1717688631,"status":10,"status_display":"Accepted","runtime":"34 ms","url":"/submissions/detail/1279674766/","is_pending":"Not Pending","title":"Hand of Straights","memory":"44.7 MB","code":"class Solution {\n    public boolean isNStraightHand(int[] hand, int groupSize) {\n        if (hand.length % groupSize != 0) {\n            return false;\n        }\n\n        HashMap<Integer, Integer> cardFreq = new HashMap<Integer, Integer>();\n        for (int card : hand) {\n            cardFreq.put(card, cardFreq.getOrDefault(card, 0) + 1);\n        }\n\n        List<Integer> uniqueVals = new ArrayList<Integer>(cardFreq.keySet());\n        Collections.sort(uniqueVals);\n        for (Integer uniqueVal : uniqueVals) {\n            while (cardFreq.get(uniqueVal) != 0) {\n                if (nextGroupValid(uniqueVal, groupSize, cardFreq)) {\n                    decGroup(uniqueVal, groupSize, cardFreq);\n                } else {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    private boolean nextGroupValid(int i, int gs, HashMap<Integer, Integer> cardFreq) {\n        for (int j = i; j < i + gs; j++) {\n            if (cardFreq.getOrDefault(j, 0) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    private void decGroup(int i, int gs, HashMap<Integer, Integer> cardFreq) {\n        for (int j = i; j < i + gs; j++) {\n            cardFreq.put(j, cardFreq.get(j)-1);\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"hand-of-straights","has_notes":false,"flag_type":1}