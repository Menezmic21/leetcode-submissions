{"id":871347859,"question_id":2362,"lang":"java","lang_name":"Java","time":"1 year, 5 months","timestamp":1672853160,"status":10,"status_display":"Accepted","runtime":"256 ms","url":"/submissions/detail/871347859/","is_pending":"Not Pending","title":"Minimum Rounds to Complete All Tasks","memory":"174.6 MB","code":"class Solution {\n    public int minimumRounds(int[] tasks) {\n        //10:20\n        HashMap<Integer, Integer> memory = new HashMap<Integer, Integer>();\n        //create frequency hashmap\n        HashMap<Integer, Integer> freq = new HashMap<Integer, Integer>();\n        for(int diff:tasks) {\n            freq.put(diff, freq.getOrDefault(diff, 0) + 1);\n        }\n        //iterate\n        int allRounds = 0;\n        for (Map.Entry<Integer, Integer> set:freq.entrySet()) {\n            int someRounds = computeRounds(set.getValue(), memory);\n            if(someRounds == -1) return -1;\n            // System.out.println(someRounds);\n            allRounds += someRounds;\n        }\n        return allRounds;\n    }\n    // public int computeRounds(int z) {\n    //     // double rounds = -1;\n    //     // double x = 0;\n    //     // double y = 0;\n    //     // while(x >= 0) {\n    //     //     x = (z - 3.0 * y) / 2.0;\n    //     //     if(x >= 0 && x == (int) x) {\n    //     //         rounds = x + y;\n    //     //         break;\n    //     //     }\n    //     //     y++;\n    //     // }\n    //     int rounds = -1;\n\n    //     for(int x = 0; x < z; x++) {\n    //         for(int y = 0; y < z; y++) {\n    //             if(2 * x + 3 * y == z) {\n    //                 if(rounds == -1 || rounds > x + y) {\n    //                     rounds = x + y;\n    //                 }\n    //             }\n    //         }\n    //     }\n\n    //     return rounds;\n    // }\n\n    public int computeRounds(int z, HashMap<Integer, Integer> memory){\n        if (z == 0) return 0;\n        if (z < 0) return -1;\n        if(memory.getOrDefault(z, null) != null) return memory.get(z);\n        int option1 = computeRounds(z - 2, memory);\n        int option2 = computeRounds(z - 3, memory);\n        if(option1 == -1 && option2 == -1) {\n            memory.put(z, -1);\n            return -1;\n        } else if(option1 == -1 || option2 == -1) {\n            int value = Math.max(computeRounds(z - 2, memory), computeRounds(z - 3, memory));\n            memory.put(z, 1 + value);\n            return 1 + value;\n        }\n        int value = Math.min(computeRounds(z - 2, memory), computeRounds(z - 3, memory));\n        memory.put(z, 1 + value);\n        return 1 + value;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-rounds-to-complete-all-tasks","has_notes":false,"flag_type":1}