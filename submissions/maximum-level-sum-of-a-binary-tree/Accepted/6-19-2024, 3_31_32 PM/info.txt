{"id":1293955006,"question_id":1116,"lang":"java","lang_name":"Java","time":"1 day, 21 hours","timestamp":1718829092,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1293955006/","is_pending":"Not Pending","title":"Maximum Level Sum of a Binary Tree","memory":"46.9 MB","code":"/**\n * Definition for a binary tree pair[0].\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int maxLevelSum(TreeNode root) {\n        Deque<TreeNode> queue = new ArrayDeque<>();\n        queue.addLast(root);\n        int n_at_depth = 1;\n        int n_at_next_depth = 0;\n        int argmax = 0;\n        int max = Integer.MIN_VALUE;\n        int sum = 0;\n        int depth = 1;\n        while (!queue.isEmpty()) {\n            TreeNode node = queue.pollFirst();\n            n_at_depth--;\n            sum += node.val;\n            if (node.left != null) {\n                queue.addLast(node.left);\n                n_at_next_depth++;\n            }\n            if (node.right != null) {\n                queue.addLast(node.right);\n                n_at_next_depth++;\n            }\n            if (n_at_depth == 0) {\n                if (sum > max) {\n                    max = sum;\n                    argmax = depth;\n                }\n                sum = 0;\n                depth++;\n                n_at_depth = n_at_next_depth;\n                n_at_next_depth = 0;\n            }\n        }\n        return argmax;\n    }\n}","compare_result":"11111111111111111111111111111111111111111","title_slug":"maximum-level-sum-of-a-binary-tree","has_notes":false,"flag_type":1}