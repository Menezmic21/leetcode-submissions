{"id":1292711171,"question_id":2236,"lang":"java","lang_name":"Java","time":"2 days, 23 hours","timestamp":1718733281,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1292711171/","is_pending":"Not Pending","title":"Maximum Twin Sum of a Linked List","memory":"65.5 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public int pairSum(ListNode head) {\n        // find middle slow fast\n        ListNode prev = null;\n        ListNode slow = head;\n        ListNode fast = head;\n        while (fast != null && fast.next != null) {\n            prev = slow;\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        // System.out.println(\"Slow: \" + slow.val);\n        // System.out.println(\"Fast: \" + fast.val);\n\n        // cut list\n        prev.next = null;\n\n        // reverse second half\n        ListNode secondHead = reverse(null, slow);\n        // System.out.println(\"FH: \" + head.val);\n        // System.out.println(\"SH: \" + secondHead.val);\n\n        // two pointer\n        int maxSum = 0;\n        while (head != null && secondHead != null) {\n            maxSum = Math.max(maxSum, head.val + secondHead.val);\n            head = head.next;\n            secondHead = secondHead.next;\n        }\n        return maxSum;\n    }\n    private ListNode reverse(ListNode prev, ListNode node) {\n        if (node == null) {\n            return prev;\n        }\n        ListNode temp = node.next;\n        node.next = prev;\n        return reverse(node, temp);\n\n    }\n\n}","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"maximum-twin-sum-of-a-linked-list","has_notes":false,"flag_type":1}