{"id":1264998367,"question_id":131,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1716392267,"status":10,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/1264998367/","is_pending":"Not Pending","title":"Palindrome Partitioning","memory":"57.2 MB","code":"class Solution {\n    public List<List<String>> partition(String s) {\n        List<List<String>> partitions = new ArrayList<List<String>>();\n        backtrace(partitions, new ArrayList<String>(), 0, s);\n        return partitions;\n    }\n    private void backtrace(List<List<String>> partitions, List<String> partition, int idx, String s) {\n        if (idx == s.length()) {\n            partitions.add(new ArrayList<String>(partition));\n            return;\n        }\n        partition.add(\"\");\n        for (int i = idx; i < s.length(); i++) {\n            String new_partition = partition.get(partition.size()-1) + s.charAt(i);\n            partition.set(partition.size()-1, new_partition);\n            if (!is_palindrome(new_partition)) {\n                continue;\n            }\n            backtrace(partitions, partition, i+1, s);\n        }\n        partition.remove(partition.size()-1);\n    }\n    private boolean is_palindrome(String s) {\n        for (int left = 0, right = s.length()-1; left < right; left++, right--) {\n            if (s.charAt(left) != s.charAt(right)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}","compare_result":"11111111111111111111111111111111","title_slug":"palindrome-partitioning","has_notes":false,"flag_type":1}