{"id":863491947,"question_id":922,"lang":"java","lang_name":"Java","time":"1 year, 6 months","timestamp":1671667659,"status":10,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/863491947/","is_pending":"Not Pending","title":"Possible Bipartition","memory":"49.9 MB","code":"class Solution {\n    public boolean possibleBipartition(int N, int[][] dislikes) {\n        List<Integer>[] adjLists = new ArrayList[N];\n        for (int i = 0; i < N; i++) {\n            adjLists[i] = new ArrayList<>();\n        }\n        for (int[] pair: dislikes) {\n            adjLists[pair[0]-1].add(pair[1]-1);\n            adjLists[pair[1]-1].add(pair[0]-1);\n        } \n\n        int[] color = new int[N];\n        for (int i = 0; i < N; i++) {\n            if (color[i] == 0 && !bfs(adjLists, i, color)) return false;\n        }\n\n        return true;\n    }\n    private boolean bfs(List<Integer>[] adjLists, int s, int[] color) {\n        Queue<Integer> q = new LinkedList<>();\n        color[s] = 1;\n        q.offer(s);\n        while (!q.isEmpty()) {\n          Integer v = q.poll();\n          for (Integer neighbor: adjLists[v]) {\n            if (color[neighbor] == 0) {\n              color[neighbor] = color[v] == 1 ? 2 : 1;\n              q.offer(neighbor);\n            } else if (color[v] == color[neighbor]) {\n              return false;\n            }\n          }\n        }\n      return true;\n      \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"possible-bipartition","has_notes":false,"flag_type":1}