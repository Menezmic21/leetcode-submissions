{"id":1294821361,"question_id":871,"lang":"java","lang_name":"Java","time":"1Â day","timestamp":1718903314,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1294821361/","is_pending":"Not Pending","title":"Keys and Rooms","memory":"43.9 MB","code":"class Solution {\n    public boolean canVisitAllRooms(List<List<Integer>> rooms) {\n        HashSet<Integer> visited = new HashSet<>();\n        dfs(rooms, 0, visited);\n        return visited.size() == rooms.size();\n    }\n    private void dfs(List<List<Integer>> rooms, int curr, HashSet<Integer> visited) {\n        visited.add(curr);\n        List<Integer> keys = rooms.get(curr);\n        for (int key : keys) {\n            if (!visited.contains(key)) {\n                dfs(rooms, key, visited);\n            }\n        }\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"keys-and-rooms","has_notes":false,"flag_type":1}