{"id":1266792071,"question_id":1381,"lang":"java","lang_name":"Java","time":"4Â weeks","timestamp":1716567570,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1266792071/","is_pending":"Not Pending","title":"Maximum Score Words Formed by Letters","memory":"44.7 MB","code":"class Solution {\n    int maxScore = -1;\n    public int maxScoreWords(String[] words, char[] letters, int[] scores) {\n        maxScore = 0;\n        // compute letter frequencies\n        HashMap<Character, Integer> freqMap = new HashMap<>();\n        for (char c : letters) {\n            freqMap.put(c, freqMap.getOrDefault(c, 0) + 1);\n        }\n        // for (Character c : freqMap.keySet()) {\n        //     System.out.println(\"\" + c + \" -> \" + freqMap.get(c));\n        // }\n        backtrace(words, new ArrayList<String>(words.length), freqMap, scores, 0);\n        return maxScore;\n    }\n    private void backtrace(String[] words, List<String> wordList, HashMap<Character, Integer> freqMap, int[] scores, int idx) {\n        if (idx == words.length) {\n            // compute score\n            int score = 0;\n            for (String word : wordList) {\n                // System.out.print(word + \" \");\n                for (char c : word.toCharArray()) {\n                    score += scores[c - 'a'];\n                }\n            }\n            // System.out.println();\n            maxScore = Math.max(maxScore, score);\n            return;\n        }\n        backtrace(words, wordList, new HashMap<Character, Integer>(freqMap), scores, idx+1);\n        for (char c : words[idx].toCharArray()) {\n            Integer letterFreq = freqMap.get(c);\n            if (letterFreq == null || letterFreq == 0) {\n                return;\n            }\n            freqMap.put(c, letterFreq-1);\n        }\n        wordList.add(words[idx]);\n        backtrace(words, wordList, new HashMap<Character, Integer>(freqMap), scores, idx+1);\n        wordList.remove(words[idx]);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"maximum-score-words-formed-by-letters","has_notes":false,"flag_type":1}