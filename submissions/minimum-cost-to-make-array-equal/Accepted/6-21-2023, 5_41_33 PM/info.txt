{"id":976691105,"question_id":2538,"lang":"python3","lang_name":"Python3","time":"1Â year","timestamp":1687387293,"status":10,"status_display":"Accepted","runtime":"3284 ms","url":"/submissions/detail/976691105/","is_pending":"Not Pending","title":"Minimum Cost to Make Array Equal","memory":"31.9 MB","code":"class Solution:\n    def getAvg(self, a, b):\n        return (int) ((a + b) / 2)\n\n    def getCost(self, target, nums, cost):\n        expense = 0\n        cnt = 0\n        for num in nums:\n            expense += abs(target - num) * cost[cnt]\n            cnt += 1\n        return expense\n\n    def minCost(self, nums: List[int], cost: List[int]) -> int:\n        top = max(nums)\n        bottom = min(nums)\n        middle = self.getAvg(top, bottom)\n        newTop = top\n        newBottom = bottom\n        dp = {}\n        dp[newTop] = self.getCost(newTop, nums, cost)\n        dp[newBottom] = self.getCost(newBottom, nums, cost)\n        dp[middle] = self.getCost(middle, nums, cost)\n        while abs(newTop - newBottom) > 2:\n            newTop = self.getAvg(top, middle)\n            newBottom = self.getAvg(bottom, middle)\n            # print(top, newTop, middle, newBottom, bottom)\n\n            dp[newTop] = self.getCost(newTop, nums, cost)\n            dp[newBottom] = self.getCost(newBottom, nums, cost)\n            dp[middle] = self.getCost(middle, nums, cost)\n\n            # print(dp[newTop], dp[newBottom])\n\n            if dp[newTop] < dp[newBottom] and dp[newTop] < dp[middle]:\n                bottom = newBottom\n            elif dp[newBottom] < dp[newTop] and dp[newBottom] < dp[middle]:\n                top = newTop\n            else:\n                right = middle + 1\n                dp[right] = self.getCost(right, nums, cost)\n                if dp[right] < dp[middle]:\n                    bottom = newBottom\n                else:\n                    top = newTop\n            middle = self.getAvg(top, bottom)\n        # print(top, newTop, middle, newBottom, bottom)\n        # print(dp)\n        return min(dp.get(top, 0), dp.get(newTop, 0), dp.get(middle, 0), dp.get(newBottom, 0), dp.get(bottom, 0))\n","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"minimum-cost-to-make-array-equal","has_notes":false,"flag_type":1}