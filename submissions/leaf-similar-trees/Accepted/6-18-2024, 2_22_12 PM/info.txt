{"id":1292800522,"question_id":904,"lang":"java","lang_name":"Java","time":"2 days, 22 hours","timestamp":1718738532,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1292800522/","is_pending":"Not Pending","title":"Leaf-Similar Trees","memory":"40.9 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int i = 0;\n    public boolean leafSimilar(TreeNode root1, TreeNode root2) {\n        List<Integer> leafSeq = new ArrayList<>();\n        makeLeafSeq(leafSeq, root1);\n        this.i = 0;\n        return compareLeafSeq(leafSeq, root2) && leafSeq.size() == i;\n    }\n    private boolean compareLeafSeq(List<Integer> leafSeq, TreeNode root) {\n        if (root.left == null && root.right == null) {\n            if (i == leafSeq.size()) {\n                return false;\n            }\n            return root.val == leafSeq.get(this.i++);\n        }\n        boolean ans = true;\n        if (root.left != null) {\n            ans &= compareLeafSeq(leafSeq, root.left);\n        }\n        if (root.right != null) {\n            ans &= compareLeafSeq(leafSeq, root.right);\n        }\n        return ans;\n    }\n    private void makeLeafSeq(List<Integer> leafSeq, TreeNode root) {\n        if (root.left == null && root.right == null) {\n            leafSeq.add(root.val);\n        }\n        if (root.left != null) {\n            makeLeafSeq(leafSeq, root.left);\n        }\n        if (root.right != null) {\n            makeLeafSeq(leafSeq, root.right);\n        }\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"leaf-similar-trees","has_notes":false,"flag_type":1}