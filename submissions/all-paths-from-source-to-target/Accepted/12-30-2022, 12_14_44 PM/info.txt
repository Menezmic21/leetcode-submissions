{"id":868193277,"question_id":813,"lang":"java","lang_name":"Java","time":"1 year, 5 months","timestamp":1672424084,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/868193277/","is_pending":"Not Pending","title":"All Paths From Source to Target","memory":"44.3 MB","code":"class Solution {\n    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {\n        return dfs(0, graph);\n    }\n    public List<List<Integer>> dfs(int node, int[][] graph) {\n        int endNode = graph.length-1;\n        List<List<Integer>> pathsList = new ArrayList<List<Integer>>();\n        if(node == endNode) {\n            List<Integer> path = new ArrayList<Integer>();\n            path.add(endNode);\n            pathsList.add(path);\n            return pathsList;\n        }\n        for(int buddy:graph[node]) {\n            List<List<Integer>> newPathsList = dfs(buddy, graph);\n            for(List<Integer> path:newPathsList) {\n                path.add(0, node);\n                pathsList.add(path);\n            }\n        }\n        return pathsList;\n    }\n}","compare_result":"111111111111111111111111111111","title_slug":"all-paths-from-source-to-target","has_notes":false,"flag_type":1}