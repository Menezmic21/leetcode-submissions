{"id":975653779,"question_id":2211,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1687274305,"status":10,"status_display":"Accepted","runtime":"90 ms","url":"/submissions/detail/975653779/","is_pending":"Not Pending","title":"K Radius Subarray Averages","memory":"62.6 MB","code":"class Solution {\n    public int[] getAverages(int[] nums, int k) {\n        int[] rarr = new int[nums.length];\n        if(2 * k + 1 > nums.length) {\n            for(int i = 0; i < nums.length; i++) {\n                rarr[i] = -1;\n            }\n            return rarr;\n        }\n        int i = 0;\n        java.math.BigInteger[] avgs = new java.math.BigInteger[nums.length];\n        avgs[0] = java.math.BigInteger.valueOf(nums[0]);\n        while(i < k) {\n            avgs[i+1] = avgs[i].add(java.math.BigInteger.valueOf(nums[i+1]));\n            avgs[i] = java.math.BigInteger.valueOf(-1);\n            avgs[nums.length-1-i] = java.math.BigInteger.valueOf(-1);\n            i++;\n        }\n        for(int j = 1; j <= k; j++) {\n            avgs[i] = avgs[i].add(java.math.BigInteger.valueOf(nums[i+j]));\n        }\n        i++;\n        while(i < nums.length - k) {\n            avgs[i] = avgs[i-1].add(java.math.BigInteger.valueOf(-nums[i-1-k])).add(java.math.BigInteger.valueOf(nums[i+k]));\n            i++;\n        }\n        i--;\n        while(i >= k) {\n            avgs[i] = avgs[i].divide(java.math.BigInteger.valueOf(2 * k + 1));\n            i--;\n        }\n        for(int j = 0; j < nums.length; j++) {\n                rarr[j] = avgs[j].intValue();\n            }\n        return rarr;\n    }\n}\n\n\n        // int[] avgs = new int[nums.length];\n        // int i = 0;\n        // avgs[0] = nums[0];\n        // while(i < k && i < nums.length) {\n        //     if(i + k < nums.length) {\n        //         avgs[i+1] += avgs[i] + nums[i+1];\n        //     }\n        //     avgs[i] = -1;\n        //     avgs[nums.length-1-i] = -1;\n        //     i++;\n        // }\n        // for(int j = 1; j <= k && i+j < nums.length; j++) {\n        //     avgs[i] += nums[i+j];\n        // }\n        // i++;\n        // while(i < nums.length - k) {\n        //     avgs[i] = avgs[i-1] - nums[i-1-k] + nums[i+k];\n        //     i++;\n        // }\n        // i--;\n        // while(i >= k && i < nums.length) {\n        //     avgs[i] = avgs[i] / (2 * k + 1);\n        //     i--;\n        // }\n        // return avgs;\n\n    //     int[] avgs = new int[nums.length];\n    //     for(int i = 0; i < nums.length; i++) {\n    //         int cnt = 0;\n    //         int j = i;\n    //         while(j >= 0 && Math.abs(j-i) <= k) { //left\n    //             avgs[i] += nums[j];\n    //             j--;\n    //             cnt++;\n    //         }\n    //         j = i + 1;\n    //         while(j < nums.length && Math.abs(j-i) <= k) { //right\n    //             avgs[i] += nums[j];\n    //             j++;\n    //             cnt++;\n    //         }\n    //         if(cnt == 2 * k + 1) {\n    //             avgs[i] = (int) (avgs[i] / cnt);\n    //         } else {\n    //             avgs[i] = -1;\n    //         }\n    //     }\n    //     return avgs;\n    // }","compare_result":"111111111111111111111111111111111111111","title_slug":"k-radius-subarray-averages","has_notes":false,"flag_type":1}