{"id":1259715946,"question_id":34,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1715871802,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1259715946/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"46.1 MB","code":"class Solution {\n    public int[] searchRange(int[] nums, int target) {\n        int[] res = new int[2];\n        res[0] = -1;\n        res[1] = -1;\n        if (nums.length > 0) {\n            res[0] = binarySearchA(nums, target);\n            res[1] = binarySearchB(nums, target);\n        }\n        return res;\n    }\n    private int binarySearchA(int[] nums, int target) {\n        int idx = -1;\n        int left = 0, right = nums.length-1;\n        for ( ; left <= right; ) {\n            int mid = (left + right) / 2;\n            int val = nums[mid];\n            if (val < target) { // val is smaller, move right\n                left = mid + 1;\n            } else if (val > target) {\n                right = mid - 1;\n            } else { // val is target\n                right = mid - 1;\n                idx = mid;\n            }\n        }\n        return idx;\n    }\n    private int binarySearchB(int[] nums, int target) {\n        int idx = -1;\n        int left = 0, right = nums.length-1;\n        for ( ; left <= right; ) {\n            int mid = (left + right) / 2;\n            int val = nums[mid];\n            if (val < target) { // val is smaller, move right\n                left = mid + 1;\n            } else if (val > target) {\n                right = mid - 1;\n            } else { // val is target\n                left = mid + 1;\n                idx = mid;\n            }\n        }\n        return idx;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1}