{"id":1295851746,"question_id":399,"lang":"java","lang_name":"Java","time":"48Â minutes","timestamp":1718989536,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1295851746/","is_pending":"Not Pending","title":"Evaluate Division","memory":"42 MB","code":"class Solution {\n    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {\n        HashMap<String, HashMap<String, Double>> graph = new HashMap<>();\n        for (int i = 0; i < values.length; i++) {\n            List<String> equation = equations.get(i);\n            String A = equation.get(0);\n            String B = equation.get(1);\n            HashMap<String, Double> neighbors = graph.getOrDefault(A, new HashMap<String, Double>());\n            neighbors.put(B, values[i]);\n            graph.put(A, neighbors);\n\n            // reverse edge\n            neighbors = graph.getOrDefault(B, new HashMap<String, Double>());\n            neighbors.put(A, 1/values[i]);\n            graph.put(B, neighbors);\n        }\n        double[] answers = new double[queries.size()];\n        for (int j = 0; j < answers.length; j++) {\n            List<String> query = queries.get(j);\n            String A = query.get(0);\n            String B = query.get(1);\n            if (graph.keySet().contains(A) && graph.keySet().contains(B)) {\n                HashSet<String> visited = new HashSet<>();\n                answers[j] = dfs(graph, A, B, visited);\n\n                // add result to graph\n                HashMap<String, Double> neighbors = graph.getOrDefault(A, new HashMap<String, Double>());\n                neighbors.put(B, answers[j]);\n                graph.put(A, neighbors);\n            } else {\n                answers[j] = -1;\n            }\n        }\n        return answers;\n    }\n    private double dfs(HashMap<String, HashMap<String, Double>> graph, String curr, String dest, HashSet<String> visited) {\n        if (visited.size() == graph.keySet().size()) {\n            return -1;\n        }\n        if (visited.contains(curr)) {\n            return -1;\n        }\n        if (curr.equals(dest)) {\n            return 1;\n        }\n        visited.add(curr);\n        HashMap<String, Double> neighbors = graph.get(curr);\n        double curr_res = -1;\n        for (String neighbor : neighbors.keySet()) {\n            double next_res = neighbors.get(neighbor);\n            if (next_res != -1) {\n                curr_res = Math.max(curr_res, neighbors.get(neighbor) * dfs(graph, neighbor, dest, visited));\n                if (curr_res < 0) {\n                    curr_res = -1;\n                }\n            }\n        }\n        return curr_res;\n    }\n}","compare_result":"1111111111111111111111111111","title_slug":"evaluate-division","has_notes":false,"flag_type":1}