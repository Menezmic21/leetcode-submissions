{"id":866543651,"question_id":234,"lang":"java","lang_name":"Java","time":"1 year, 5 months","timestamp":1672171577,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/866543651/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"59.4 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public boolean isPalindrome(ListNode head) {\n        //get length\n        int len = 1;\n        ListNode node = head;\n        while(node.next != null) {\n            len++;\n            node = node.next;\n        }\n        \n        if(len == 1) return true;\n        \n        // printLinkedList(head);\n        \n        //reverse first half\n        node = head;\n        ListNode secondHead = head;\n        for(int i = 1; i < (int) len / 2; i++) {\n            node = node.next;\n        }\n        secondHead = (int) len / 2 == (double) len / 2.0 ? node.next: node.next.next;\n        node.next = null;\n        head = reverseList(head);\n        \n        // printLinkedList(head);\n        // printLinkedList(secondHead);\n        \n        //matching?\n        boolean matching = true;\n        int count = 0;\n        ListNode A = head;\n        ListNode B = secondHead;\n        while(matching && count < (int) len / 2) {\n            count++;\n            matching = A.val == B.val;\n            A = A.next;\n            B = B.next;\n        }\n        return matching;\n    }\n    public ListNode reverseList(ListNode head) {\n        \n        if(head == null || head.next == null) return head;\n        \n        ListNode node = head.next;\n        ListNode prev = head;\n        \n        prev.next = node.next;\n        node.next = head;\n        head = node;\n        node = prev.next;\n        while(node != null) {            \n            prev.next = node.next;\n            node.next = head;\n            head = node;\n            node = prev.next;          \n        }\n        return head;\n    }\n    \n    public void printLinkedList(ListNode head) {\n        ListNode node = head;\n        System.out.print(node.val + \" \");\n        while(node.next != null) {\n            node = node.next;\n            System.out.print(node.val + \" \");\n        }\n        System.out.println();\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-linked-list","has_notes":false,"flag_type":1}