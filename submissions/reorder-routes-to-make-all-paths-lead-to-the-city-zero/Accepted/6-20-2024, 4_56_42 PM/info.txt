{"id":1295037714,"question_id":1576,"lang":"java","lang_name":"Java","time":"19 hours, 57 minutes","timestamp":1718920602,"status":10,"status_display":"Accepted","runtime":"72 ms","url":"/submissions/detail/1295037714/","is_pending":"Not Pending","title":"Reorder Routes to Make All Paths Lead to the City Zero","memory":"68.1 MB","code":"class Solution {\n    public int minReorder(int n, int[][] connections) {\n        HashSet<Integer>[] neighbors = (HashSet<Integer>[]) new HashSet[n];\n        for (int i = 0 ; i < n; i++) {\n            neighbors[i] = new HashSet<Integer>();\n        }\n        for (int[] connection : connections) {\n            int a = connection[0];\n            int b = connection[1];\n            neighbors[a].add(b);\n            neighbors[b].add(-a);\n        }\n        boolean[] visited = new boolean[n];\n        Deque<Integer> queue = new ArrayDeque<>();\n        queue.addLast(0);\n        int n_flips = 0;\n        while(!queue.isEmpty()) {\n            int node = queue.pollFirst();\n            visited[node] = true;\n            for (int neighbor : neighbors[node]) {\n                if (visited[Math.abs(neighbor)]) {\n                    continue;\n                }\n                if (neighbor > 0) {\n                    n_flips++;\n                }\n                queue.addLast(Math.abs(neighbor));\n            }\n        }\n        return n_flips;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"reorder-routes-to-make-all-paths-lead-to-the-city-zero","has_notes":false,"flag_type":1}