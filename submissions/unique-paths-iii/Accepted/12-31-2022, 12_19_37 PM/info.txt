{"id":868664318,"question_id":1022,"lang":"java","lang_name":"Java","time":"1 year, 5 months","timestamp":1672510777,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/868664318/","is_pending":"Not Pending","title":"Unique Paths III","memory":"42.4 MB","code":"class Solution {\n    public int uniquePathsIII(int[][] grid) {\n        int row =  0;\n        int column = 0;\n        boolean[][] visited = new boolean[grid.length][grid[0].length];\n        for(int i = 0; i < grid.length; i++) {\n            for(int j = 0; j < grid[0].length; j++) {\n                if(grid[i][j] == 1) {\n                    row = i;\n                    column = j;\n                } else if(grid[i][j] == -1) {\n                    visited[i][j] = true;\n                }\n            }\n        }\n        return dfs(row, column, grid, visited);\n    }\n    public int dfs(int row, int column, int[][] grid, boolean[][] visited) {\n        if(!inBounds(row, 0, grid.length)) return 0;\n        if(!inBounds(column, 0, grid[0].length)) return 0;\n\n        if(grid[row][column] == -1) return 0;\n        if(visited[row][column]) return 0;\n        if(grid[row][column] == 2 && allVisited(row, column, visited)) return 1;\n\n        boolean[][] visitedCopy = new boolean[visited.length][visited[0].length];\n        for(int i = 0; i < grid.length; i++) {\n            for(int j = 0; j < grid[0].length; j++) {\n                visitedCopy[i][j] = visited[i][j];\n            }\n        }\n\n        visitedCopy[row][column] = true;\n\n        return dfs(row - 1, column, grid, visitedCopy) + dfs(row, column + 1, grid, visitedCopy) + dfs(row + 1, column, grid, visitedCopy) + dfs(row, column - 1, grid, visitedCopy);\n    }\n    public boolean inBounds(int val, int min, int max) {\n        return min <= val && val < max;\n    }\n    public boolean allVisited(int row, int column, boolean[][] visited) {\n        boolean isAllVisited = true;\n        exit: for(int i = 0; i < visited.length; i++) {\n            for(int j = 0; j < visited[0].length; j++) {\n                if(i != row || j != column) {\n                    if(!visited[i][j]) {\n                        isAllVisited = false;\n                        break exit;\n                    }\n                }\n            }\n        }\n        return isAllVisited;\n    }\n}","compare_result":"111111111111111111111111111111111111111","title_slug":"unique-paths-iii","has_notes":false,"flag_type":1}