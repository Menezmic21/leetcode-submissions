{"id":1011281662,"question_id":17,"lang":"java","lang_name":"Java","time":"10 months, 3 weeks","timestamp":1691076222,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1011281662/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"41.1 MB","code":"class Solution {\n    public List<String> letterCombinations(String digits) {\n        if(digits.length() == 0) return new ArrayList<String>();\n        HashMap<Integer, String> map = new HashMap<Integer, String>();\n        map.put(2, \"abc\");\n        map.put(3, \"def\");\n        map.put(4, \"ghi\");\n        map.put(5, \"jkl\");\n        map.put(6, \"mno\");\n        map.put(7, \"pqrs\");\n        map.put(8, \"tuv\");\n        map.put(9, \"wxyz\");\n\n        List<String> combs = new ArrayList<String>();\n        backtrace(combs, map, 0, digits, \"\");\n        return combs;\n    }\n    public void backtrace(List<String> combs, HashMap<Integer, String> map, int start, String digits, String comb) {\n        if(comb.length() == digits.length()) {\n            combs.add(comb);\n            return;\n        }\n        String chars = map.get(Integer.valueOf(\"\" + digits.charAt(start)));\n        for(int i = 0; i < chars.length(); i++) {\n            Character c = chars.charAt(i);\n            backtrace(combs, map, start+1, digits, comb+c);\n        }\n    }\n}","compare_result":"1111111111111111111111111","title_slug":"letter-combinations-of-a-phone-number","has_notes":false,"flag_type":1}