{"id":1010354255,"question_id":77,"lang":"java","lang_name":"Java","time":"10 months, 3 weeks","timestamp":1690988103,"status":10,"status_display":"Accepted","runtime":"43 ms","url":"/submissions/detail/1010354255/","is_pending":"Not Pending","title":"Combinations","memory":"45.1 MB","code":"class Solution {\n    public List<List<Integer>> combine(int n, int k) {\n        List<List<Integer>> combs = new ArrayList<List<Integer>>();\n        backtrace(combs, n, k, 1, new ArrayList<Integer>());\n        return combs;\n    }\n\n    public void backtrace(List<List<Integer>> combs, int n, int k, int start, ArrayList<Integer> comb) {\n        if(comb.size() == k) {\n            combs.add(new ArrayList<Integer>(comb));\n            return;\n        }\n        for(int i = start; i <= n; i++) {\n            ArrayList<Integer> newComb = new ArrayList<Integer>(comb);\n            newComb.add(i);\n            backtrace(combs, n, k, i+1, newComb);\n            newComb.remove(newComb.size()-1);\n        }\n\n    }\n}","compare_result":"111111111111111111111111111","title_slug":"combinations","has_notes":false,"flag_type":1}