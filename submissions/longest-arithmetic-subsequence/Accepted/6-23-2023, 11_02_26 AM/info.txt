{"id":977954678,"question_id":1087,"lang":"java","lang_name":"Java","time":"12Â months","timestamp":1687536146,"status":10,"status_display":"Accepted","runtime":"2231 ms","url":"/submissions/detail/977954678/","is_pending":"Not Pending","title":"Longest Arithmetic Subsequence","memory":"43 MB","code":"class Solution {\n    public int longestArithSeqLength(int[] nums) {\n        int max = 0;\n        // HashMap<Integer, Integer> mem = new HashMap<Integer, Integer>();\n        ArrayList<Integer> seen = new ArrayList<Integer>();\n        for(int i = 0; i < nums.length-1; i++) {\n            if(!seen.contains(nums[i])) {\n                seen.add(nums[i]);\n                for(int j = i+1; j < nums.length; j++) {\n                    int m = nums[j] - nums[i];\n                    max = Math.max(max, getCoincident(nums, nums[i], nums[j] - nums[i]));\n                }\n            }\n        }\n        return max;\n    }\n\n    public int getCoincident(int[] nums, int num1, int m) {\n        int cnt = 0;\n        for(int num:nums) {\n            if(num == num1 + m * cnt) cnt++;\n            \n        }\n        return cnt;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-arithmetic-subsequence","has_notes":false,"flag_type":1}