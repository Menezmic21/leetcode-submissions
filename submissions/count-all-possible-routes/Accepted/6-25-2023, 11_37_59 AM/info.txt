{"id":979425339,"question_id":1680,"lang":"java","lang_name":"Java","time":"12Â months","timestamp":1687711079,"status":10,"status_display":"Accepted","runtime":"346 ms","url":"/submissions/detail/979425339/","is_pending":"Not Pending","title":"Count All Possible Routes","memory":"47.6 MB","code":"class Solution {\n\n    HashMap<Integer, Integer> mem = new HashMap<Integer, Integer>();\n\n    public int countRoutes(int[] locations, int start, int finish, int fuel) {\n        if(fuel < 0) return 0;\n\n        int num = start * 201 + fuel; // coordToNum(start, fuel);\n        if(mem.getOrDefault(num, null) != null) {\n            return mem.get(num); \n        }\n\n        int routes = 0;\n        if(start == finish) {\n            routes++;\n        }\n        for(int i = 0; i < locations.length; i++) {\n            if(i == start) continue;\n            routes += countRoutes(locations, i, finish, fuel - Math.abs(locations[start] - locations[i]));\n            routes %= 1e9 + 7;\n        } \n        mem.put(num, routes);\n        // System.out.println(\"\" + start + \" \" + fuel + \" \" + routes);\n        return routes;\n    }\n\n    // public int coordToNum(int loc, int gas) {\n    //     return loc * 201 + gas;\n    // }\n\n    // public int[] numToCoord(int num) {\n    //     int[] coord = {num / 201, num % 201};\n    //     return coord;\n    // }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-all-possible-routes","has_notes":false,"flag_type":1}