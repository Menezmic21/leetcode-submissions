{"id":1115971895,"question_id":300,"lang":"java","lang_name":"Java","time":"6 months, 2 weeks","timestamp":1702151345,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/1115971895/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"43.4 MB","code":"class Solution {\n    public int lengthOfLIS(int[] nums) {\n        int n = nums.length;\n        int[] DP = new int[n];\n        DP[0] = 1;\n        for(int i = 1; i < n; i++) {\n            DP[i] = 1;\n            for(int j = 0; j < i; j++) {\n                if(nums[j] < nums[i]) {\n                    DP[i] = Math.max(DP[i], 1 + DP[j]);\n                }\n            }\n        }\n        int lis = 0;\n        for(int i = 0; i < n; i++) {\n            // System.out.println(DP[i]);\n            lis = Math.max(lis, DP[i]);\n        }\n        return lis;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence","has_notes":false,"flag_type":1}