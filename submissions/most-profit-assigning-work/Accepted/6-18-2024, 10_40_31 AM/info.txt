{"id":1292558854,"question_id":853,"lang":"java","lang_name":"Java","time":"3 days, 2 hours","timestamp":1718725231,"status":10,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/1292558854/","is_pending":"Not Pending","title":"Most Profit Assigning Work","memory":"45.8 MB","code":"class Solution {\n    public int maxProfitAssignment(int[] difficulty, int[] profit, int[] worker) {\n        Arrays.sort(worker);\n        PriorityQueue<int[]> diffPQ = new PriorityQueue<>((int[] A, int[] B) -> (Integer.compare(A[0], B[0])));\n        for (int i = 0; i < difficulty.length; i++) {\n            int[] pair = new int[2];\n            pair[0] = difficulty[i];\n            pair[1] = profit[i];\n            diffPQ.add(pair);\n        }\n        int maxProfit = 0;\n        PriorityQueue<int[]> profPQ = new PriorityQueue<>((int[] A, int[] B) -> (Integer.compare(B[1], A[1])));\n        for (int i = 0; i < worker.length; i++) {\n            while (!diffPQ.isEmpty() && diffPQ.peek()[0] <= worker[i]) {\n                profPQ.add(diffPQ.poll());\n            }\n            if (!profPQ.isEmpty()) {\n                maxProfit += profPQ.peek()[1];\n            }\n        }\n        return maxProfit;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"most-profit-assigning-work","has_notes":false,"flag_type":1}