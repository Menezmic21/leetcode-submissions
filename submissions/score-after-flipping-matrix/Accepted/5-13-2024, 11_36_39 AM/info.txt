{"id":1257087050,"question_id":891,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1715618199,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1257087050/","is_pending":"Not Pending","title":"Score After Flipping Matrix","memory":"41.4 MB","code":"class Solution {\n    public int matrixScore(int[][] grid) {\n        // System.out.println(\"Z\");\n        // printGrid(grid);\n        // Ensure first bit of row is 1\n        for (int row = 0; row < grid.length; row++) {\n            if (grid[row][0] == 0) {\n                flipRow(grid, row);\n            }\n        }\n        // System.out.println(\"A\");\n        // printGrid(grid);\n\n        // Maximize columns\n        for (int col = 0; col < grid[0].length; col++) {\n            if (getNumOnesInCol(grid, col) <= (int) (grid.length / 2)) {\n                flipCol(grid, col);\n            }\n        }\n        // System.out.println(\"B\");\n        // printGrid(grid);\n        return gridScore(grid);\n    }\n    private int getNumOnesInCol(int[][] grid, int col) {\n        int sum = 0;\n        for (int row = 0; row < grid.length; row++) {\n            sum += grid[row][col];\n        }\n        return sum;\n    }\n    private int rowScore(int[][] grid, int row) {\n        int score = 0;\n        for (int i = grid[row].length-1, pow = 0; i >= 0; i--) {\n            if (grid[row][i] == 1) {\n                score += Math.pow(2, pow);\n            }\n            pow++;\n        }\n        return score;\n    }\n    private int gridScore(int[][] grid) {\n        int score = 0;\n        for (int row = 0; row < grid.length; row++) {\n            score += rowScore(grid, row);\n        }\n        return score;\n    }\n    private void flipCol(int[][] grid, int col) {\n        for (int row = 0; row < grid.length; row++) {\n            grid[row][col] = 1 - grid[row][col];\n        }\n    }\n    private void flipRow(int[][] grid, int row) {\n        for (int col = 0; col < grid[row].length; col++) {\n            grid[row][col] = 1 - grid[row][col];\n        }\n    }\n    private void printGrid(int[][] grid) {\n        for (int row = 0; row < grid.length; row++) {\n            for (int col = 0; col < grid[row].length; col++) {\n                System.out.print(grid[row][col] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"score-after-flipping-matrix","has_notes":false,"flag_type":1}