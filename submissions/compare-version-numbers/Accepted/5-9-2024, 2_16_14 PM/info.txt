{"id":1253867246,"question_id":165,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1715282174,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1253867246/","is_pending":"Not Pending","title":"Compare Version Numbers","memory":"41.3 MB","code":"class Solution {\n    public int compareVersion(String version1, String version2) {\n        String[] revisions1 = version1.split(\"\\\\.\");\n        int len1 = revisions1.length;\n        String[] revisions2 = version2.split(\"\\\\.\");\n        int len2 = revisions2.length;\n        // System.out.println(Arrays.toString(revisions1));\n        // System.out.println(Arrays.toString(revisions2));\n        for (int i = 0; i < Math.max(len1, len2); i++) {\n            int val = 0;\n            if (len1 <= i) { // no left revision\n                val = Integer.compare(0, Integer.valueOf(revisions2[i]));\n            } else if (len2 <= i) { // no right revision\n                val = Integer.compare(Integer.valueOf(revisions1[i]), 0);\n            } else { // both have revisions\n                val = Integer.compare(Integer.valueOf(revisions1[i]), Integer.valueOf(revisions2[i]));\n            }\n            // System.out.println(\"A: \" + Integer.valueOf(revisions1[i]));\n            // System.out.println(\"B: \" + Integer.valueOf(revisions2[i]));\n            if (val != 0) {\n                return val > 0 ? 1 : -1;\n            }\n        }\n        return 0;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"compare-version-numbers","has_notes":false,"flag_type":1}