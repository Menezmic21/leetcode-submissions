{"id":1267711113,"question_id":140,"lang":"java","lang_name":"Java","time":"3 weeks, 6 days","timestamp":1716655619,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1267711113/","is_pending":"Not Pending","title":"Word Break II","memory":"42 MB","code":"class TreeNode {\n    HashMap<Character, TreeNode> children;\n    Character c = null;\n    boolean isValid = false;\n    public TreeNode(HashMap<Character, TreeNode> children, Character c, boolean isValid) {\n        this.children = children;\n        this.c = c;\n        this.isValid = isValid;\n    }\n}\n\nclass Solution {\n    TreeNode root;\n    public List<String> wordBreak(String s, List<String> wordDict) {\n        // Make Trie\n        root = new TreeNode(new HashMap<Character, TreeNode>(), ' ', false);\n        for (String word : wordDict) {\n            TreeNode node = root;\n            for (char c : word.toCharArray()) {\n                if (!node.children.keySet().contains(c)) {\n                    TreeNode child = new TreeNode(new HashMap<Character, TreeNode>(), c, false);\n                    node.children.put(c, child);\n                }\n                node = node.children.get(c);\n            }\n            node.isValid = true;\n        }\n        // System.out.println(trieContains(root, \"pine\"));\n\n        List<String> sentences = new ArrayList<String>();\n        backtrace(sentences, \"\", s, root, 0);\n        return sentences;\n    }\n\n    private void backtrace(List<String> sentences, String sentence, String s, TreeNode node, int idx) {\n        if (idx == s.length()) {\n            if (node.isValid) {\n                sentences.add(sentence);\n            }\n            return;\n        }\n        Character c = s.charAt(idx);\n        // if (!node.children.keySet().contains(c)) { // c missing\n        //     return;\n        // }\n        TreeNode nextNode = node.children.get(c);\n        if (nextNode == null) { // c missing\n            return;\n        } else if (nextNode.isValid && idx < s.length()-1) {\n            backtrace(sentences, sentence+c+\" \", s, root, idx+1);\n        }\n        backtrace(sentences, sentence+c, s, nextNode, idx+1);\n    }\n\n    private boolean trieContains(TreeNode root, String s) {\n        if (s.length() == 0) {\n            // System.out.println(\"root: \" + root.c);\n            return root.isValid;\n        }\n        Character c = s.charAt(0);\n        if (!root.children.keySet().contains(c)) {\n            // System.out.println(\"trie missing: \" + c);\n            return false;\n        }\n        // System.out.println(\"trie has: \" + c);\n        return trieContains(root.children.get(c), s.substring(1));\n    }\n}","compare_result":"111111111111111111111111111","title_slug":"word-break-ii","has_notes":false,"flag_type":1}