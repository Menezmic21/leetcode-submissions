{"id":1259055322,"question_id":23,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1715805157,"status":10,"status_display":"Accepted","runtime":"142 ms","url":"/submissions/detail/1259055322/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"44.1 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        // Find head\n        int k = lists.length;\n        int min = Integer.MAX_VALUE;\n        int argmin = -1;\n        for (int i = 0; i < k; i++) {\n            ListNode list = lists[i];\n            if (list != null && list.val < min) {\n                min = list.val;\n                argmin = i;\n            }\n        }\n\n        // Pop head\n        if (argmin == -1) return null;\n        ListNode head = popHead(lists, argmin);\n        ListNode node = head;\n\n        // Merge lists\n        while(true) {\n            min = Integer.MAX_VALUE;\n            argmin = -1;\n            for (int i = 0; i < k; i++) {\n                ListNode list = lists[i];\n                if (list != null && list.val < min) {\n                    min = list.val;\n                    argmin = i;\n                }\n            }\n            if (argmin == -1) break;\n            node.next = popHead(lists, argmin);\n            node = node.next;\n        }\n\n        return head;\n    }\n    private ListNode popHead(ListNode[] lists, int i) {\n        ListNode node = lists[i];\n        lists[i] = node.next;\n        return node;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists","has_notes":false,"flag_type":1}